<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>snowFlakeXue</title>
  <icon>https://www.gravatar.com/avatar/4543c26cc38d80588b9c8a253b44cc58</icon>
  <subtitle>Work hard for what you desire.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="snowFlakeXue.github.io/"/>
  <updated>2019-05-16T11:13:00.305Z</updated>
  <id>snowFlakeXue.github.io/</id>
  
  <author>
    <name>Liu Xue</name>
    <email>liuxue82@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vtext</title>
    <link href="snowFlakeXue.github.io/2019/05/16/vtext/"/>
    <id>snowFlakeXue.github.io/2019/05/16/vtext/</id>
    <published>2019-05-16T02:38:46.000Z</published>
    <updated>2019-05-16T11:13:00.305Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>指针</title>
    <link href="snowFlakeXue.github.io/2019/05/12/%E6%8C%87%E9%92%88/"/>
    <id>snowFlakeXue.github.io/2019/05/12/指针/</id>
    <published>2019-05-11T23:07:08.000Z</published>
    <updated>2019-05-16T10:37:30.349Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;ol&gt;
&lt;li&gt;什么是指针：指针是储存地址的变量，他也有自己的地址，他通过自己储存的地址指向内存单元&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/2019/05/12/指针/1.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;ol
        
      
    
    </summary>
    
      <category term="C++" scheme="snowFlakeXue.github.io/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>BOM</title>
    <link href="snowFlakeXue.github.io/2019/05/09/BOM/"/>
    <id>snowFlakeXue.github.io/2019/05/09/BOM/</id>
    <published>2019-05-09T05:39:31.000Z</published>
    <updated>2019-05-11T00:45:38.602Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;BOM-浏览器对象模型，是实现与浏览器交流的&quot;&gt;&lt;a href=&quot;#BOM-浏览器对象模型，是实现与浏览器交流的&quot; class=&quot;headerlink&quot; title=&quot;BOM:浏览器对象模型，是实现与浏览器交流的&quot;&gt;&lt;/a&gt;BOM:浏览器对象模型，是实现与浏览器交流的&lt;/h2&gt;&lt;h2 id=&quot;window&quot;&gt;&lt;a href=&quot;#window&quot; class=&quot;headerlink&quot; title=&quot;window&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;window&lt;/font&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;window.document（可省略window）(document就是表示这个文档，我理解成跟this差不多)&lt;/li&gt;
&lt;li&gt;window.innerHeight（浏览器内部高度，除去菜单栏，工具栏啥的）window.innerWidth（浏览器内部宽度）(Internet Explorer、Chrome、Firefox、Opera 以及 Safari支持)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;document.body.clientHeight/document.body.clientWidth(Internet Explorer 8、7、6、5支持)&lt;/p&gt;
&lt;p&gt;window.outerHeight（浏览器完整高度)window.outerWidth(浏览器完整宽度)&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript学习" scheme="snowFlakeXue.github.io/categories/javascript%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>HTML_DOM</title>
    <link href="snowFlakeXue.github.io/2019/05/08/HTML-DOM/"/>
    <id>snowFlakeXue.github.io/2019/05/08/HTML-DOM/</id>
    <published>2019-05-08T02:51:59.000Z</published>
    <updated>2019-05-11T00:48:19.290Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是DOM：DOM是文档对象模型，他分xhtml-html-核心dom三种，所以html-dom就是可以对html文本中任何元素进行修改删除等操作&quot;&gt;&lt;a href=&quot;#什么是DOM：DOM是文档对象模型，他分xhtml-html-核心dom三种，所以html-dom就是可以对html文本中任何元素进行修改删除等操作&quot; class=&quot;headerlink&quot; title=&quot;什么是DOM：DOM是文档对象模型，他分xhtml,html,核心dom三种，所以html dom就是可以对html文本中任何元素进行修改删除等操作&quot;&gt;&lt;/a&gt;什么是DOM：DOM是文档对象模型，他分xhtml,html,核心dom三种，所以html dom就是可以对html文本中任何元素进行修改删除等操作&lt;/h2&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="javascript学习" scheme="snowFlakeXue.github.io/categories/javascript%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>函数</title>
    <link href="snowFlakeXue.github.io/2019/05/07/%E5%87%BD%E6%95%B0/"/>
    <id>snowFlakeXue.github.io/2019/05/07/函数/</id>
    <published>2019-05-07T05:52:38.000Z</published>
    <updated>2019-05-16T10:36:49.694Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在js中函数也是对象，因此可以把它赋给一个变量，一个数组元素，甚至作为参数传给另一个函数调用&quot;&gt;&lt;a href=&quot;#在js中函数也是对象，因此可以把它赋给一个变量，一个数组元素，甚至作为参数传给另一个函数调用&quot; class=&quot;headerlink&quot; title=&quot;在js中函数也是对象，因此可以把它赋给一个变量，一个数组元素，甚至作为参数传给另一个函数调用&quot;&gt;&lt;/a&gt;在js中函数也是对象，因此可以把它赋给一个变量，一个数组元素，甚至作为参数传给另一个函数调用&lt;/h2&gt;&lt;h2 id=&quot;函数的定义&quot;&gt;&lt;a href=&quot;#函数的定义&quot; class=&quot;headerlink&quot; title=&quot;函数的定义&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;函数的定义&lt;/font&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;声明式的静态方式(所有浏览器都支持）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;function 函数名(形参列表){函数体}//注意没有var否则报错,且function必须小写&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;①这种方式最常用，他只需定义一次，在程序的完整过程中，他一直被存在内存中，只在页面打开时解析一次，不论是什么调用它，返回的都是函数体处理完的结果&lt;/p&gt;
&lt;p&gt;②要设定返回值，他可以有0个到多个return,一般多个return 都用在需要判断条件时，即满足这个条件就不往下执行函数体内容&lt;/p&gt;
&lt;p&gt;③参数方面注意传参形式，一种是传值，一种是传地址，简单点说就是传值不改变实参，传地址改变实参&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript学习" scheme="snowFlakeXue.github.io/categories/javascript%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>day3</title>
    <link href="snowFlakeXue.github.io/2019/05/06/day3/"/>
    <id>snowFlakeXue.github.io/2019/05/06/day3/</id>
    <published>2019-05-06T15:12:39.000Z</published>
    <updated>2019-05-06T15:20:26.915Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;1.为什么程序底层要用二进制数：因为cpu和内存其实是IC的一种,而IC它两端有引角，引角只能输入5或0伏电压，这与二进制只有0和1对应，因此，每个引脚对应二进制的一位&lt;/p&gt;
&lt;ol
        
      
    
    </summary>
    
      <category term="睡前小读" scheme="snowFlakeXue.github.io/categories/%E7%9D%A1%E5%89%8D%E5%B0%8F%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>js对象</title>
    <link href="snowFlakeXue.github.io/2019/05/06/js%E5%AF%B9%E8%B1%A1/"/>
    <id>snowFlakeXue.github.io/2019/05/06/js对象/</id>
    <published>2019-05-06T01:57:10.000Z</published>
    <updated>2019-05-16T10:39:46.640Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;四种对象&quot;&gt;&lt;a href=&quot;#四种对象&quot; class=&quot;headerlink&quot; title=&quot;四种对象&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;四种对象&lt;/font&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;javascript内置对象&lt;/li&gt;
&lt;li&gt;浏览器对象模型中的对象(BOM)&lt;/li&gt;
&lt;li&gt;文档对象模型中的对象&lt;/li&gt;
&lt;li&gt;用户自定义的对象&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="javascript学习" scheme="snowFlakeXue.github.io/categories/javascript%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>day2</title>
    <link href="snowFlakeXue.github.io/2019/05/05/day2/"/>
    <id>snowFlakeXue.github.io/2019/05/05/day2/</id>
    <published>2019-05-05T14:52:26.000Z</published>
    <updated>2019-05-06T03:09:37.223Z</updated>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;程序运行时，程序计数器指向一个地址值，然后顺序结构的话，每进行一条指令，程序计数器上的值加一&lt;/li&gt;
&lt;li&gt;其实cpu处理程序很有意思，像是比较累加寄存器和通用寄存器中的值，他实际上会进行减法运算，通过正负零来判断谁大谁小&lt;/li&gt;
&lt;li&gt;运算结果存放在标志寄存器，无论结果是什么都会存放进去，同时标志寄存器还负责存放溢出和奇偶判断&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="睡前小读" scheme="snowFlakeXue.github.io/categories/%E7%9D%A1%E5%89%8D%E5%B0%8F%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>运算符和语句</title>
    <link href="snowFlakeXue.github.io/2019/05/05/%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%AF%AD%E5%8F%A5/"/>
    <id>snowFlakeXue.github.io/2019/05/05/运算符和语句/</id>
    <published>2019-05-05T02:08:41.000Z</published>
    <updated>2019-05-16T10:35:43.775Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;js语句的格式&quot;&gt;&lt;a href=&quot;#js语句的格式&quot; class=&quot;headerlink&quot; title=&quot;js语句的格式&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;js语句的格式&lt;/font&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;要养成每条语句后都写分号的习惯&lt;/li&gt;
&lt;li&gt;在js代码中，空白没意义，为了让代码更直观更易于维护，可尝试养成在等号前后，加号等前后写空格的习惯&lt;h2 id=&quot;赋值语句&quot;&gt;&lt;a href=&quot;#赋值语句&quot; class=&quot;headerlink&quot; title=&quot;赋值语句&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;赋值语句&lt;/font&gt;&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;由左边变量，赋值变量和右边被赋给的值组成&lt;/li&gt;
&lt;li&gt;右边的表达式可以是直接量值&lt;br&gt;&lt;code&gt;var vm = 35;&lt;/code&gt;&lt;br&gt;一个变量和直接量再加上运算符的组合&lt;br&gt;&lt;code&gt;var value = vm + 27;&lt;/code&gt;&lt;br&gt;函数的调用&lt;br&gt;&lt;code&gt;var nvalue = escape();&lt;/code&gt;&lt;br&gt;一行可以包含多个赋值语句&lt;br&gt;&lt;code&gt;var a = b = c = 23;&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="javascript学习" scheme="snowFlakeXue.github.io/categories/javascript%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>day1</title>
    <link href="snowFlakeXue.github.io/2019/05/04/day1/"/>
    <id>snowFlakeXue.github.io/2019/05/04/day1/</id>
    <published>2019-05-04T14:50:12.000Z</published>
    <updated>2019-05-04T15:12:40.070Z</updated>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;CPU和内存是由很多的晶体管组成，他俩合称IC（集成电路）&lt;/li&gt;
&lt;li&gt;CPU由寄存器，运算器，控制器和时钟组成&lt;/li&gt;
&lt;li&gt;程序运行过程：首先由程序员用高级语言写出程序，然后把程序编译成机器语言（即exe文件），然后将这个exe文件在内存上存一个副本，然后再在CPU上解析运行&lt;/li&gt;
&lt;li&gt;将CPU的解析和运行过程放大来讲，是时钟先发出时钟信号，cpu开始工作啦，他先让寄存器去抓内存上的数据，然后运算器进行运算，然后控制器通过运算结果来控制整个计算机，其实也就是控制输入输出什么的&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="睡前小读" scheme="snowFlakeXue.github.io/categories/%E7%9D%A1%E5%89%8D%E5%B0%8F%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>js数据类型与变量</title>
    <link href="snowFlakeXue.github.io/2019/05/04/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%98%E9%87%8F/"/>
    <id>snowFlakeXue.github.io/2019/05/04/js数据类型与变量/</id>
    <published>2019-05-04T07:54:24.000Z</published>
    <updated>2019-05-16T10:38:20.953Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;标识符&quot;&gt;&lt;a href=&quot;#标识符&quot; class=&quot;headerlink&quot; title=&quot;标识符&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;标识符&lt;/font&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;标识符只能由数字，字母，$符和下划线表示&lt;/li&gt;
&lt;li&gt;首字符必须是字母或$符或下划线，切记不能是数字&lt;/li&gt;
&lt;li&gt;在所使用的的作用域内，每个变量的标识符是唯一的&lt;/li&gt;
&lt;li&gt;可在变量标识符中使用Unicode的字母和数字，&lt;a href=&quot;http://www.unicode.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;可使用转义序列&lt;/li&gt;
&lt;li&gt;区分大小写&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不得使用js关键字，ECMA 262规范的保留字，浏览器中典型的保留字，具体如下图&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="javascript学习" scheme="snowFlakeXue.github.io/categories/javascript%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>myBlog</title>
    <link href="snowFlakeXue.github.io/2019/05/04/myBlog/"/>
    <id>snowFlakeXue.github.io/2019/05/04/myBlog/</id>
    <published>2019-05-04T05:23:10.000Z</published>
    <updated>2019-05-04T05:59:38.235Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;嘻嘻嘻。&quot;&gt;&lt;a href=&quot;#嘻嘻嘻。&quot; class=&quot;headerlink&quot; title=&quot;嘻嘻嘻。&quot;&gt;&lt;/a&gt;嘻嘻嘻。&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2019/05/04/myBlog/hhh.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="日常" scheme="snowFlakeXue.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
</feed>
