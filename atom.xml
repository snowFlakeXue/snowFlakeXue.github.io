<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>snowFlakeXue</title>
  <icon>https://www.gravatar.com/avatar/4543c26cc38d80588b9c8a253b44cc58</icon>
  <subtitle>Work hard for what you desire.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="snowFlakeXue.github.io/"/>
  <updated>2019-05-26T08:51:05.413Z</updated>
  <id>snowFlakeXue.github.io/</id>
  
  <author>
    <name>Liu Xue</name>
    <email>liuxue82@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>参数传递</title>
    <link href="snowFlakeXue.github.io/2019/05/26/%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/"/>
    <id>snowFlakeXue.github.io/2019/05/26/参数传递/</id>
    <published>2019-05-26T08:26:10.000Z</published>
    <updated>2019-05-26T08:51:05.413Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;vue-router中提供了两种传参方式，一种是name传递法，另一种是绑定to的传递方法。第一种不常用,因为第一种的name实际上用在第二种的参数上&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue-router" scheme="snowFlakeXue.github.io/categories/vue-router/"/>
    
    
  </entry>
  
  <entry>
    <title>子路由</title>
    <link href="snowFlakeXue.github.io/2019/05/26/%E5%AD%90%E8%B7%AF%E7%94%B1/"/>
    <id>snowFlakeXue.github.io/2019/05/26/子路由/</id>
    <published>2019-05-26T02:32:28.000Z</published>
    <updated>2019-05-26T06:24:05.898Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;子路由的应用可以说还是很广的，也就是说当我给某个组件设置了子路由，那么每当我点击这个子路由，这个组件都会显示，就好像淘宝里的推荐，当我选中一类时他会给你推荐相似的，而我这一类会一直留在界面上，只是在下面展示我的各个子路由，下面就来操作一下子路由的配置方法&lt;/p&gt;
&lt;h3
        
      
    
    </summary>
    
      <category term="vue-router" scheme="snowFlakeXue.github.io/categories/vue-router/"/>
    
    
  </entry>
  
  <entry>
    <title>vue-router</title>
    <link href="snowFlakeXue.github.io/2019/05/26/vue-router/"/>
    <id>snowFlakeXue.github.io/2019/05/26/vue-router/</id>
    <published>2019-05-26T01:40:34.000Z</published>
    <updated>2019-05-26T06:24:20.669Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;vue-router是vue的很重要的一部分，他不是物理的那种路由器啊啥的，可以把他理解为像a标签，但是因为vue-cli开发出来的实际上是单页面应用，所以用a标签是不够用的，因此vue帮我们配置了这么一个功能，首先就先了解一下要用到的几个重要文件&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue-router" scheme="snowFlakeXue.github.io/categories/vue-router/"/>
    
    
  </entry>
  
  <entry>
    <title>自定义组件</title>
    <link href="snowFlakeXue.github.io/2019/05/25/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/"/>
    <id>snowFlakeXue.github.io/2019/05/25/自定义组件/</id>
    <published>2019-05-25T11:21:59.000Z</published>
    <updated>2019-05-25T11:24:36.025Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>实例事件</title>
    <link href="snowFlakeXue.github.io/2019/05/25/%E5%AE%9E%E4%BE%8B%E4%BA%8B%E4%BB%B6/"/>
    <id>snowFlakeXue.github.io/2019/05/25/实例事件/</id>
    <published>2019-05-25T09:36:58.000Z</published>
    <updated>2019-05-25T09:55:50.163Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在构造器外添加事件$on&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>实例方法</title>
    <link href="snowFlakeXue.github.io/2019/05/25/%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/"/>
    <id>snowFlakeXue.github.io/2019/05/25/实例方法/</id>
    <published>2019-05-25T07:42:48.000Z</published>
    <updated>2019-05-25T08:06:18.763Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>实例入门</title>
    <link href="snowFlakeXue.github.io/2019/05/25/%E5%AE%9E%E4%BE%8B%E5%85%A5%E9%97%A8/"/>
    <id>snowFlakeXue.github.io/2019/05/25/实例入门/</id>
    <published>2019-05-25T06:35:18.000Z</published>
    <updated>2019-05-25T06:50:13.822Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;实例就是在构造器外部操作构造器内部的属性和方法，他让Vue可以和其他框架一起使用&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>delimiters选项</title>
    <link href="snowFlakeXue.github.io/2019/05/25/delimiters%E9%80%89%E9%A1%B9/"/>
    <id>snowFlakeXue.github.io/2019/05/25/delimiters选项/</id>
    <published>2019-05-25T05:51:42.000Z</published>
    <updated>2019-05-25T05:55:19.108Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;delimiters是用在当我们想修改一些东西比如我不想用花括号来绑定值时使用,他一般在数组里有两个元素，第一个是改变后的前面的，另一个是改变后后面的部分&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>extends选项</title>
    <link href="snowFlakeXue.github.io/2019/05/25/extends%E9%80%89%E9%A1%B9/"/>
    <id>snowFlakeXue.github.io/2019/05/25/extends选项/</id>
    <published>2019-05-25T05:46:09.000Z</published>
    <updated>2019-05-25T05:50:51.098Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;extends方法和mixins差不多，是个扩展选项，只是在构造器里写的时候他是个对象（只能有一个对象），而mixins可以写一个数组&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>mixins选项</title>
    <link href="snowFlakeXue.github.io/2019/05/25/mixins%E9%80%89%E9%A1%B9/"/>
    <id>snowFlakeXue.github.io/2019/05/25/mixins选项/</id>
    <published>2019-05-25T03:50:50.000Z</published>
    <updated>2019-05-25T05:26:51.971Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;mixins是混入选项操作，一般用于在你写完构造器后想加些东西却不想污染构造器时使用，一种是当很多地方需要用时作为全局的使用，随时可以调用，同时下面的栗子中构造器原生的updated和构造器内的和全局的还有顺序规则，需要注意的是如果构造器内的mixin的名和构造器内方法的名
        
      
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>watch选项</title>
    <link href="snowFlakeXue.github.io/2019/05/25/watch%E9%80%89%E9%A1%B9/"/>
    <id>snowFlakeXue.github.io/2019/05/25/watch选项/</id>
    <published>2019-05-25T03:03:55.000Z</published>
    <updated>2019-05-25T03:13:06.277Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;watch选项用于监控数据变化，一种是直接在构造器内用watch选项，一种是为了避免耦合度在构造器外使用&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>methods选项</title>
    <link href="snowFlakeXue.github.io/2019/05/24/methods%E9%80%89%E9%A1%B9/"/>
    <id>snowFlakeXue.github.io/2019/05/24/methods选项/</id>
    <published>2019-05-24T09:49:00.000Z</published>
    <updated>2019-05-25T02:37:33.013Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;methods方法一般跟@click这样的绑定，下面有三个栗子，分别是简单的传值绑定，组件绑定，实例外绑定&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
        
      
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>computed选项</title>
    <link href="snowFlakeXue.github.io/2019/05/24/computed%E9%80%89%E9%A1%B9/"/>
    <id>snowFlakeXue.github.io/2019/05/24/computed选项/</id>
    <published>2019-05-24T08:48:15.000Z</published>
    <updated>2019-05-24T10:40:17.872Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;computed选项一般用来改变原来的值得形式，使data选项里的值尽量的整洁简单，因此我们一般用computed选项来给绑定的值进行改变大小写啊，添加修饰啊。下面就举一个将新闻日期倒过来的小栗子，因为数据输入时是旧时间到新时间，而我们想要的是先看到新时间的新闻，所以在co
        
      
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>propsData</title>
    <link href="snowFlakeXue.github.io/2019/05/24/propsData/"/>
    <id>snowFlakeXue.github.io/2019/05/24/propsData/</id>
    <published>2019-05-24T05:22:46.000Z</published>
    <updated>2019-05-24T05:40:03.251Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;实际上propsData他不是挂载个属性，它是一个选项，甚至说这很不常用，完全可以用组件实现，但是要认识他，他是个传递数据的选项&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
        
      
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>keyframes</title>
    <link href="snowFlakeXue.github.io/2019/05/23/keyframes/"/>
    <id>snowFlakeXue.github.io/2019/05/23/keyframes/</id>
    <published>2019-05-23T12:38:55.000Z</published>
    <updated>2019-05-23T13:34:44.544Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;与transition不同，这个可以在一开始就进行动画演示，无需操作，这在CSS动画中是很重要的部分，他可以让你任意调动，说白了，这个关键帧动画实际上就是多个补间动画,另外还有一种逐帧动画，它是一种特殊的关键帧动画，只不过他没有补间动画是一帧一帧的，但是他资源使用大，因此除
        
      
    
    </summary>
    
      <category term="CSS动画" scheme="snowFlakeXue.github.io/categories/CSS%E5%8A%A8%E7%94%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>transition</title>
    <link href="snowFlakeXue.github.io/2019/05/23/transition/"/>
    <id>snowFlakeXue.github.io/2019/05/23/transition/</id>
    <published>2019-05-23T11:33:05.000Z</published>
    <updated>2019-05-23T12:38:29.138Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;transition(过渡)是用来设置补间动画的即自动填补两个画面中间的部分，但必须有前后变化，比如下面的栗子中，就得有个hover&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
        
      
    
    </summary>
    
      <category term="CSS动画" scheme="snowFlakeXue.github.io/categories/CSS%E5%8A%A8%E7%94%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>组件标签</title>
    <link href="snowFlakeXue.github.io/2019/05/21/%E7%BB%84%E4%BB%B6%E6%A0%87%E7%AD%BE/"/>
    <id>snowFlakeXue.github.io/2019/05/21/组件标签/</id>
    <published>2019-05-21T12:50:21.000Z</published>
    <updated>2019-05-21T13:05:37.289Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;组件标签就是&lt;code&gt;&amp;lt;component&amp;gt;&amp;lt;/component&amp;gt;&lt;/code&gt;,是vue自己定义的，可以用这个实现动态选择组件，详情看下面的小栗子&lt;/p&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>父子组件关系</title>
    <link href="snowFlakeXue.github.io/2019/05/21/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/"/>
    <id>snowFlakeXue.github.io/2019/05/21/父子组件关系/</id>
    <published>2019-05-21T12:05:01.000Z</published>
    <updated>2019-05-21T12:36:02.029Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;下面我将举个小栗子来说明父子组件关系&lt;br&gt;&lt;img src=&quot;/2019/05/21/父子组件关系/1.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>组件属性设置</title>
    <link href="snowFlakeXue.github.io/2019/05/21/%E7%BB%84%E4%BB%B6%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE/"/>
    <id>snowFlakeXue.github.io/2019/05/21/组件属性设置/</id>
    <published>2019-05-21T11:33:43.000Z</published>
    <updated>2019-05-21T12:15:20.273Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;组件属性(props)的设置有两个坑，第一个坑是组件属性命名一定不能有-只能化成驼峰式，第二个坑是props是数组，不能写成对象形式而且他是写在template底下的；&lt;/p&gt;
&lt;p&gt;组件属性设置有两种，一种是直接属性，一种是绑定data&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>初识组件</title>
    <link href="snowFlakeXue.github.io/2019/05/20/%E5%88%9D%E8%AF%86%E7%BB%84%E4%BB%B6/"/>
    <id>snowFlakeXue.github.io/2019/05/20/初识组件/</id>
    <published>2019-05-20T13:00:48.000Z</published>
    <updated>2019-05-20T13:18:13.916Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;组件实际上就是创建html不存在的标签，非常常用&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
</feed>
