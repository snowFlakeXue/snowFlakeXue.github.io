<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>snowFlakeXue</title>
  <icon>https://www.gravatar.com/avatar/4543c26cc38d80588b9c8a253b44cc58</icon>
  <subtitle>Work hard for what you desire.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="snowFlakeXue.github.io/"/>
  <updated>2019-05-24T05:40:03.251Z</updated>
  <id>snowFlakeXue.github.io/</id>
  
  <author>
    <name>Liu Xue</name>
    <email>liuxue82@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>propsData</title>
    <link href="snowFlakeXue.github.io/2019/05/24/propsData/"/>
    <id>snowFlakeXue.github.io/2019/05/24/propsData/</id>
    <published>2019-05-24T05:22:46.000Z</published>
    <updated>2019-05-24T05:40:03.251Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;实际上propsData他不是挂载个属性，它是一个选项，甚至说这很不常用，完全可以用组件实现，但是要认识他，他是个传递数据的选项&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
        
      
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>keyframes</title>
    <link href="snowFlakeXue.github.io/2019/05/23/keyframes/"/>
    <id>snowFlakeXue.github.io/2019/05/23/keyframes/</id>
    <published>2019-05-23T12:38:55.000Z</published>
    <updated>2019-05-23T13:34:44.544Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;与transition不同，这个可以在一开始就进行动画演示，无需操作，这在CSS动画中是很重要的部分，他可以让你任意调动，说白了，这个关键帧动画实际上就是多个补间动画,另外还有一种逐帧动画，它是一种特殊的关键帧动画，只不过他没有补间动画是一帧一帧的，但是他资源使用大，因此除
        
      
    
    </summary>
    
      <category term="CSS动画" scheme="snowFlakeXue.github.io/categories/CSS%E5%8A%A8%E7%94%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>transition</title>
    <link href="snowFlakeXue.github.io/2019/05/23/transition/"/>
    <id>snowFlakeXue.github.io/2019/05/23/transition/</id>
    <published>2019-05-23T11:33:05.000Z</published>
    <updated>2019-05-23T12:38:29.138Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;transition(过渡)是用来设置补间动画的即自动填补两个画面中间的部分，但必须有前后变化，比如下面的栗子中，就得有个hover&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
        
      
    
    </summary>
    
      <category term="CSS动画" scheme="snowFlakeXue.github.io/categories/CSS%E5%8A%A8%E7%94%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>组件标签</title>
    <link href="snowFlakeXue.github.io/2019/05/21/%E7%BB%84%E4%BB%B6%E6%A0%87%E7%AD%BE/"/>
    <id>snowFlakeXue.github.io/2019/05/21/组件标签/</id>
    <published>2019-05-21T12:50:21.000Z</published>
    <updated>2019-05-21T13:05:37.289Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;组件标签就是&lt;code&gt;&amp;lt;component&amp;gt;&amp;lt;/component&amp;gt;&lt;/code&gt;,是vue自己定义的，可以用这个实现动态选择组件，详情看下面的小栗子&lt;/p&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>父子组件关系</title>
    <link href="snowFlakeXue.github.io/2019/05/21/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/"/>
    <id>snowFlakeXue.github.io/2019/05/21/父子组件关系/</id>
    <published>2019-05-21T12:05:01.000Z</published>
    <updated>2019-05-21T12:36:02.029Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;下面我将举个小栗子来说明父子组件关系&lt;br&gt;&lt;img src=&quot;/2019/05/21/父子组件关系/1.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>组件属性设置</title>
    <link href="snowFlakeXue.github.io/2019/05/21/%E7%BB%84%E4%BB%B6%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE/"/>
    <id>snowFlakeXue.github.io/2019/05/21/组件属性设置/</id>
    <published>2019-05-21T11:33:43.000Z</published>
    <updated>2019-05-21T12:15:20.273Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;组件属性(props)的设置有两个坑，第一个坑是组件属性命名一定不能有-只能化成驼峰式，第二个坑是props是数组，不能写成对象形式而且他是写在template底下的；&lt;/p&gt;
&lt;p&gt;组件属性设置有两种，一种是直接属性，一种是绑定data&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>初识组件</title>
    <link href="snowFlakeXue.github.io/2019/05/20/%E5%88%9D%E8%AF%86%E7%BB%84%E4%BB%B6/"/>
    <id>snowFlakeXue.github.io/2019/05/20/初识组件/</id>
    <published>2019-05-20T13:00:48.000Z</published>
    <updated>2019-05-20T13:18:13.916Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;组件实际上就是创建html不存在的标签，非常常用&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>制作模板</title>
    <link href="snowFlakeXue.github.io/2019/05/20/%E5%88%B6%E4%BD%9C%E6%A8%A1%E6%9D%BF/"/>
    <id>snowFlakeXue.github.io/2019/05/20/制作模板/</id>
    <published>2019-05-20T11:58:33.000Z</published>
    <updated>2019-05-20T12:35:02.620Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Vue的模板(template)有三种创建方式&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>生命周期</title>
    <link href="snowFlakeXue.github.io/2019/05/19/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>snowFlakeXue.github.io/2019/05/19/生命周期/</id>
    <published>2019-05-19T12:43:24.000Z</published>
    <updated>2019-05-19T13:13:55.025Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;生命周期又叫钩子函数，就是在某个节点进行某个操作，这里讲的是构造器里的生命周期，总共有十个，有两个需结合组件学习-activated-deactivated-，所以先学八个&quot;&gt;&lt;a href=&quot;#生命周期又叫钩子函数，就是在某个节点进行某个操作，这里讲的是构造器里的生命周期，总共有十个，有两个需结合组件学习-activated-deactivated-，所以先学八个&quot; class=&quot;headerlink&quot; title=&quot;生命周期又叫钩子函数，就是在某个节点进行某个操作，这里讲的是构造器里的生命周期，总共有十个，有两个需结合组件学习(activated,deactivated)，所以先学八个&quot;&gt;&lt;/a&gt;生命周期又叫钩子函数，就是在某个节点进行某个操作，这里讲的是构造器里的生命周期，总共有十个，有两个需结合组件学习(activated,deactivated)，所以先学八个&lt;/h3&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue.set</title>
    <link href="snowFlakeXue.github.io/2019/05/18/Vue-set/"/>
    <id>snowFlakeXue.github.io/2019/05/18/Vue-set/</id>
    <published>2019-05-18T00:10:58.000Z</published>
    <updated>2019-05-21T12:16:22.300Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;先举个调用构造器外数据的小栗子&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>day4</title>
    <link href="snowFlakeXue.github.io/2019/05/17/day4/"/>
    <id>snowFlakeXue.github.io/2019/05/17/day4/</id>
    <published>2019-05-17T14:38:44.000Z</published>
    <updated>2019-05-17T14:53:39.835Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;ol&gt;
&lt;li&gt;将二进制转换为小数，同样是各位乘以位权&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/2019/05/17/day4/1.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;ol
        
      
    
    </summary>
    
      <category term="睡前小读" scheme="snowFlakeXue.github.io/categories/%E7%9D%A1%E5%89%8D%E5%B0%8F%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue.extend</title>
    <link href="snowFlakeXue.github.io/2019/05/17/Vue-extend/"/>
    <id>snowFlakeXue.github.io/2019/05/17/Vue-extend/</id>
    <published>2019-05-17T02:49:20.000Z</published>
    <updated>2019-05-17T03:05:29.746Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;因为还没学组件所以下面的将是一个简单的扩展实例构造器的小栗子，一般情况下扩展实例构造器是要和组件一起使用的&quot;&gt;&lt;a href=&quot;#因为还没学组件所以下面的将是一个简单的扩展实例构造器的小栗子，一般情况下扩展实例构造器是要和组件一起使用的&quot;
        
      
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>自定义指令</title>
    <link href="snowFlakeXue.github.io/2019/05/16/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/"/>
    <id>snowFlakeXue.github.io/2019/05/16/自定义指令/</id>
    <published>2019-05-16T12:00:49.000Z</published>
    <updated>2019-05-21T12:16:45.358Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;先举个小栗子&quot;&gt;&lt;a href=&quot;#先举个小栗子&quot; class=&quot;headerlink&quot; title=&quot;先举个小栗子&quot;&gt;&lt;/a&gt;先举个小栗子&lt;/h3&gt;&lt;p&gt;要注意的是，vue提供的Vue-directive来自定义值令方法时要把这段代码写在vue实例化之前否则会报错，同时指令命名不能用驼峰法否则也会报错，V大写！&lt;/p&gt;
&lt;p&gt;代码里一些不熟悉的将在下面详细的讲讲&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>其他指令</title>
    <link href="snowFlakeXue.github.io/2019/05/16/%E5%85%B6%E4%BB%96%E6%8C%87%E4%BB%A4/"/>
    <id>snowFlakeXue.github.io/2019/05/16/其他指令/</id>
    <published>2019-05-16T08:26:07.000Z</published>
    <updated>2019-05-16T10:34:41.356Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;v-pre v-cloak v-once&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>vbind</title>
    <link href="snowFlakeXue.github.io/2019/05/16/vbind/"/>
    <id>snowFlakeXue.github.io/2019/05/16/vbind/</id>
    <published>2019-05-16T07:44:39.000Z</published>
    <updated>2019-05-16T10:32:37.665Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;v-bind用于绑定属性，样式，很重要&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>vmodel</title>
    <link href="snowFlakeXue.github.io/2019/05/16/vmodel/"/>
    <id>snowFlakeXue.github.io/2019/05/16/vmodel/</id>
    <published>2019-05-16T03:07:15.000Z</published>
    <updated>2019-05-16T10:33:32.944Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;v-model是实现双向绑定的方法，是vue的核心&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>von</title>
    <link href="snowFlakeXue.github.io/2019/05/16/von/"/>
    <id>snowFlakeXue.github.io/2019/05/16/von/</id>
    <published>2019-05-16T03:07:05.000Z</published>
    <updated>2019-05-16T10:34:05.089Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;v-on是事件绑定，他的缩写是&lt;code&gt;@&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>vhtml</title>
    <link href="snowFlakeXue.github.io/2019/05/16/vhtml/"/>
    <id>snowFlakeXue.github.io/2019/05/16/vhtml/</id>
    <published>2019-05-16T02:44:37.000Z</published>
    <updated>2019-05-16T10:33:17.152Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;注意这种方法在你无法保证绝对安全时不要使用，否则会造成SSR攻击&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vtext</title>
    <link href="snowFlakeXue.github.io/2019/05/16/vtext/"/>
    <id>snowFlakeXue.github.io/2019/05/16/vtext/</id>
    <published>2019-05-16T02:38:46.000Z</published>
    <updated>2019-05-16T11:17:32.681Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;这种写法的作用和花括号法一样，但在网速慢加载不出来时不会输出花括号降低用户体验&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
        
      
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>vfor</title>
    <link href="snowFlakeXue.github.io/2019/05/16/vfor/"/>
    <id>snowFlakeXue.github.io/2019/05/16/vfor/</id>
    <published>2019-05-16T01:48:16.000Z</published>
    <updated>2019-05-16T10:32:57.572Z</updated>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;一个简单排序,注意这里面sort方法容易掉的坑，不仅是vue所有的js都有这个bug，因此这种解决方式很常用&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
</feed>
