<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>snowFlakeXue</title>
  <icon>https://www.gravatar.com/avatar/4543c26cc38d80588b9c8a253b44cc58</icon>
  <subtitle>Work hard for what you desire.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="snowFlakeXue.github.io/"/>
  <updated>2019-06-02T11:37:52.124Z</updated>
  <id>snowFlakeXue.github.io/</id>
  
  <author>
    <name>Liu Xue</name>
    <email>liuxue82@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>state访问状态对象</title>
    <link href="snowFlakeXue.github.io/2019/06/02/state%E8%AE%BF%E9%97%AE%E7%8A%B6%E6%80%81%E5%AF%B9%E8%B1%A1/"/>
    <id>snowFlakeXue.github.io/2019/06/02/state访问状态对象/</id>
    <published>2019-06-02T11:21:02.000Z</published>
    <updated>2019-06-02T11:37:52.124Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在之前的小栗子里虽然已经可以实现功能，但是在接受数据时，那么一大长串很烦，下面就用三种方法可以直接写花括号就能访问，其中第三种是最常用的&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;第一种&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
      <category term="vuex" scheme="snowFlakeXue.github.io/categories/vuex/"/>
    
    
  </entry>
  
  <entry>
    <title>vuex入门</title>
    <link href="snowFlakeXue.github.io/2019/06/02/vuex%E5%85%A5%E9%97%A8/"/>
    <id>snowFlakeXue.github.io/2019/06/02/vuex入门/</id>
    <published>2019-06-02T10:46:28.000Z</published>
    <updated>2019-06-02T11:05:45.480Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;vuex是专门为vue服务的管理状态的一个东西，也可以说是管理data中需要共用的属性，下面这个小栗子就是个入门，里面的很多东西具体的意思会在后面补充，也许这个栗子做完之后会觉得比以前做的麻烦，但是我们主要是想用一个公共的思想他可以被任意一个component调用&lt;/p&gt;

        
      
    
    </summary>
    
      <category term="vuex" scheme="snowFlakeXue.github.io/categories/vuex/"/>
    
    
  </entry>
  
  <entry>
    <title>编程式导航</title>
    <link href="snowFlakeXue.github.io/2019/05/28/%E7%BC%96%E7%A8%8B%E5%BC%8F%E5%AF%BC%E8%88%AA/"/>
    <id>snowFlakeXue.github.io/2019/05/28/编程式导航/</id>
    <published>2019-05-28T06:41:26.000Z</published>
    <updated>2019-05-28T06:50:19.677Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;编程式导航就是取代router-link方法来写导航，他是运用javascript逻辑来写，这里常用的就是前进后退到某一页&lt;/p&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
        
      
    
    </summary>
    
      <category term="vue-router" scheme="snowFlakeXue.github.io/categories/vue-router/"/>
    
    
  </entry>
  
  <entry>
    <title>路由中的钩子函数</title>
    <link href="snowFlakeXue.github.io/2019/05/28/%E8%B7%AF%E7%94%B1%E4%B8%AD%E7%9A%84%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
    <id>snowFlakeXue.github.io/2019/05/28/路由中的钩子函数/</id>
    <published>2019-05-28T06:21:44.000Z</published>
    <updated>2019-05-28T06:28:17.169Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;路由中的钩子函数我们一般只用两种，他们可以写在index.js中，也可写在模板，但是写在index.js中只能写beforeEnter不能写离开的钩子函数，而且在模板里能写两个都要在中间加一个Route,无论哪种书写方式，都要注意是使用三个参数的箭头函数，一定要写next(),它相当于一个开关，有了他才能接着跳转&lt;/p&gt;
    
    </summary>
    
      <category term="vue-router" scheme="snowFlakeXue.github.io/categories/vue-router/"/>
    
    
  </entry>
  
  <entry>
    <title>mode设置和404处理</title>
    <link href="snowFlakeXue.github.io/2019/05/28/mode%E8%AE%BE%E7%BD%AE%E5%92%8C404%E5%A4%84%E7%90%86/"/>
    <id>snowFlakeXue.github.io/2019/05/28/mode设置和404处理/</id>
    <published>2019-05-28T04:59:02.000Z</published>
    <updated>2019-05-28T05:23:06.898Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;首先此mode非彼mode，这里的mode 是指在用户浏览器你上url形式的,如果喜欢简洁的就用history,如果要有井号的就用hash全品个人喜好，那就在index.js下引入mode&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mode:&lt;span class=&quot;string&quot;&gt;&#39;history&#39;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//或hash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="vue-router" scheme="snowFlakeXue.github.io/categories/vue-router/"/>
    
    
  </entry>
  
  <entry>
    <title>路由过渡动画</title>
    <link href="snowFlakeXue.github.io/2019/05/27/%E8%B7%AF%E7%94%B1%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/"/>
    <id>snowFlakeXue.github.io/2019/05/27/路由过渡动画/</id>
    <published>2019-05-27T07:58:40.000Z</published>
    <updated>2019-05-28T04:49:14.529Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;路由过渡动画就是在切换路由的时候加点动画效果，这里就是把router-view用transition包起来，然后给他个name叫fade， 然后fade有四个类名，就通过这四个类名给路由加动画即可，更酷炫的效果需要有css和js功底，当然也可以用插件，然后还有个mode属性,他只有两个值，一个是in-out一个是out-in顾名思义就知道什么意思了，这里我们用out-in更好看一点&lt;/p&gt;
    
    </summary>
    
      <category term="vue-router" scheme="snowFlakeXue.github.io/categories/vue-router/"/>
    
    
  </entry>
  
  <entry>
    <title>alias别名</title>
    <link href="snowFlakeXue.github.io/2019/05/27/alias%E5%88%AB%E5%90%8D/"/>
    <id>snowFlakeXue.github.io/2019/05/27/alias别名/</id>
    <published>2019-05-27T07:42:26.000Z</published>
    <updated>2019-05-27T07:55:12.102Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;alias别名的作用与redirect的重定向差不多，只不过alias更友好一点，他不会在用户那边地址栏上把url改了&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue-router" scheme="snowFlakeXue.github.io/categories/vue-router/"/>
    
    
  </entry>
  
  <entry>
    <title>重定向</title>
    <link href="snowFlakeXue.github.io/2019/05/27/%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>snowFlakeXue.github.io/2019/05/27/重定向/</id>
    <published>2019-05-27T06:45:24.000Z</published>
    <updated>2019-05-27T07:32:15.388Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;重定向实质上就是在路径不同的情况下我想跳转到同一页面的需求，下面将展示传参数和不穿参数的两种重定向，操作很简单,在index.js中就是把想要定位的路径复制到redirect里&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue-router" scheme="snowFlakeXue.github.io/categories/vue-router/"/>
    
    
  </entry>
  
  <entry>
    <title>URL传值</title>
    <link href="snowFlakeXue.github.io/2019/05/27/URL%E4%BC%A0%E5%80%BC/"/>
    <id>snowFlakeXue.github.io/2019/05/27/URL传值/</id>
    <published>2019-05-27T06:15:04.000Z</published>
    <updated>2019-05-27T06:32:27.972Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;虽然现在前后端分离，之间的数据传递用接口，但是url传值方法还是很常用的&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;第一步：在index.js文件的路径中添加想传的值&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
        
      
    
    </summary>
    
      <category term="vue-router" scheme="snowFlakeXue.github.io/categories/vue-router/"/>
    
    
  </entry>
  
  <entry>
    <title>单页面多路由</title>
    <link href="snowFlakeXue.github.io/2019/05/27/%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%A4%9A%E8%B7%AF%E7%94%B1/"/>
    <id>snowFlakeXue.github.io/2019/05/27/单页面多路由/</id>
    <published>2019-05-27T02:25:59.000Z</published>
    <updated>2019-05-27T03:22:44.458Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;vue提供的路由非常方便我们把页面分开成几个部分分别操作，下面就动手简单做一个&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue-router" scheme="snowFlakeXue.github.io/categories/vue-router/"/>
    
    
  </entry>
  
  <entry>
    <title>参数传递</title>
    <link href="snowFlakeXue.github.io/2019/05/26/%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/"/>
    <id>snowFlakeXue.github.io/2019/05/26/参数传递/</id>
    <published>2019-05-26T08:26:10.000Z</published>
    <updated>2019-05-27T02:25:33.047Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;vue-router中提供了两种传参方式，一种是name传递法，另一种是绑定to的传递方法。第一种不常用,因为第一种的name实际上用在第二种的参数上&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue-router" scheme="snowFlakeXue.github.io/categories/vue-router/"/>
    
    
  </entry>
  
  <entry>
    <title>子路由</title>
    <link href="snowFlakeXue.github.io/2019/05/26/%E5%AD%90%E8%B7%AF%E7%94%B1/"/>
    <id>snowFlakeXue.github.io/2019/05/26/子路由/</id>
    <published>2019-05-26T02:32:28.000Z</published>
    <updated>2019-05-27T02:25:34.934Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;子路由的应用可以说还是很广的，也就是说当我给某个组件设置了子路由，那么每当我点击这个子路由，这个组件都会显示，就好像淘宝里的推荐，当我选中一类时他会给你推荐相似的，而我这一类会一直留在界面上，只是在下面展示我的各个子路由，下面就来操作一下子路由的配置方法&lt;/p&gt;
&lt;h3
        
      
    
    </summary>
    
      <category term="vue-router" scheme="snowFlakeXue.github.io/categories/vue-router/"/>
    
    
  </entry>
  
  <entry>
    <title>vue-router</title>
    <link href="snowFlakeXue.github.io/2019/05/26/vue-router/"/>
    <id>snowFlakeXue.github.io/2019/05/26/vue-router/</id>
    <published>2019-05-26T01:40:34.000Z</published>
    <updated>2019-05-27T02:25:28.934Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;vue-router是vue的很重要的一部分，他不是物理的那种路由器啊啥的，可以把他理解为像a标签，但是因为vue-cli开发出来的实际上是单页面应用，所以用a标签是不够用的，因此vue帮我们配置了这么一个功能，首先就先了解一下要用到的几个重要文件&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue-router" scheme="snowFlakeXue.github.io/categories/vue-router/"/>
    
    
  </entry>
  
  <entry>
    <title>自定义组件</title>
    <link href="snowFlakeXue.github.io/2019/05/25/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/"/>
    <id>snowFlakeXue.github.io/2019/05/25/自定义组件/</id>
    <published>2019-05-25T11:21:59.000Z</published>
    <updated>2019-05-25T11:24:36.025Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>实例事件</title>
    <link href="snowFlakeXue.github.io/2019/05/25/%E5%AE%9E%E4%BE%8B%E4%BA%8B%E4%BB%B6/"/>
    <id>snowFlakeXue.github.io/2019/05/25/实例事件/</id>
    <published>2019-05-25T09:36:58.000Z</published>
    <updated>2019-05-25T09:55:50.163Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在构造器外添加事件$on&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>实例方法</title>
    <link href="snowFlakeXue.github.io/2019/05/25/%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/"/>
    <id>snowFlakeXue.github.io/2019/05/25/实例方法/</id>
    <published>2019-05-25T07:42:48.000Z</published>
    <updated>2019-05-25T08:06:18.763Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>实例入门</title>
    <link href="snowFlakeXue.github.io/2019/05/25/%E5%AE%9E%E4%BE%8B%E5%85%A5%E9%97%A8/"/>
    <id>snowFlakeXue.github.io/2019/05/25/实例入门/</id>
    <published>2019-05-25T06:35:18.000Z</published>
    <updated>2019-05-25T06:50:13.822Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;实例就是在构造器外部操作构造器内部的属性和方法，他让Vue可以和其他框架一起使用&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>delimiters选项</title>
    <link href="snowFlakeXue.github.io/2019/05/25/delimiters%E9%80%89%E9%A1%B9/"/>
    <id>snowFlakeXue.github.io/2019/05/25/delimiters选项/</id>
    <published>2019-05-25T05:51:42.000Z</published>
    <updated>2019-05-25T05:55:19.108Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;delimiters是用在当我们想修改一些东西比如我不想用花括号来绑定值时使用,他一般在数组里有两个元素，第一个是改变后的前面的，另一个是改变后后面的部分&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>extends选项</title>
    <link href="snowFlakeXue.github.io/2019/05/25/extends%E9%80%89%E9%A1%B9/"/>
    <id>snowFlakeXue.github.io/2019/05/25/extends选项/</id>
    <published>2019-05-25T05:46:09.000Z</published>
    <updated>2019-05-25T05:50:51.098Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;extends方法和mixins差不多，是个扩展选项，只是在构造器里写的时候他是个对象（只能有一个对象），而mixins可以写一个数组&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>mixins选项</title>
    <link href="snowFlakeXue.github.io/2019/05/25/mixins%E9%80%89%E9%A1%B9/"/>
    <id>snowFlakeXue.github.io/2019/05/25/mixins选项/</id>
    <published>2019-05-25T03:50:50.000Z</published>
    <updated>2019-05-25T05:26:51.971Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;mixins是混入选项操作，一般用于在你写完构造器后想加些东西却不想污染构造器时使用，一种是当很多地方需要用时作为全局的使用，随时可以调用，同时下面的栗子中构造器原生的updated和构造器内的和全局的还有顺序规则，需要注意的是如果构造器内的mixin的名和构造器内方法的名
        
      
    
    </summary>
    
      <category term="Vue" scheme="snowFlakeXue.github.io/categories/Vue/"/>
    
    
  </entry>
  
</feed>
