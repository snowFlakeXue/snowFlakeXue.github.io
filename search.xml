<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[js对象]]></title>
    <url>%2F2019%2F05%2F06%2Fjs%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[四种对象 javascript内置对象 浏览器对象模型中的对象(BOM) 文档对象模型中的对象 用户自定义的对象 下面总结的都是第一种，javascript的内置对象js对象中都有自己的属性和方法，也可以通过new来新建一个对象，有的对象要注意对象和函数的区分，比如Number对象和Number()和Number对象的实例化 Boolean对象 必须注意创建Boolean对象实例的方法必须是与new结合的构造函数var boo = new Boolean(true); 在Boolean对象被实例化后，可通过Object的方法toValue来访问它所封装的基本值if(boo.toValue())···; 也可直接访问if(boo) Number对象 要注意在js中他对数值得辨识度并不高，它不论是整数还是指数还是浮点数，一律处理成64位的浮点型，也就是说在js中只有浮点型 Number对象的实例化，可以用new也可以直接用Number(),但是用Number的话是number型，不是对象 Number对象的属性，注意是对象不是对象的实例化 ①MAX_VALUE 指js可接受的最大值 ②MIN_VALUE 指js可接受的最小值 ③NEGATIVE_INFINITY 指js中定义的负无穷值 ④POSITIVE_INFINITY 指js中定义的正无穷值12345678document.write(Number.MAX_VALUE);document.write(Number.MIN_VALUE);document.write(Number.NEGATIVE_INFINITY);document.write(Number.POSITIVE_INFINITY);/*若写成以下形式会报错,因为只能是Number对象的var num = new Number(4)document.write(num.MAX_VALUE); */ 结果：1.7976931348623157e+3085e-324-InfinityInfinity Number对象的方法 ①toString() 有一个形参，是一个2到36的整数，默认为10，是将对象的实例化按进制输出123var num = new Number(&quot;100&quot;);document.write(num.toString(2));//若是用Number()实例化的，也不慌，会将他转换成对象在用这个函数，在转回变量 ②toLocalString() 无形参，作用是转化为本地格式的字符串12var num = new Number(1876653);document.write(num.toLocaleString()); 结果：1,876,653 ③toFixed() 有一个形参代表要有的小数位数，范围是0到20，包括0,20，不写默认为0,注意这个会四舍五入，要是不够会用零补上12var num = new Number(187.6653);document.write(num.toFixed()); 结果：18812var num = new Number(23.56);document.write(num.toFixed(10)); 结果：23.5600000000 ④toPrecision() 有一个参数,代表有效数位，会四舍五入，参数取值范围是1到21包括1,21；若不写参数，就会调用toString()12var num = new Number(23.56);document.write(num.toPrecision(3)); 结果：23.612var num = new Number(23.56);document.write(num.toPrecision()); 结果：23.56 ⑤toExponential() 将数值表示成指数型，有一个形参，代表保留小数位,若省略参数将显示尽可能多的小数位12var num = new Number(23.56356789);document.write(num.toExponential(3)); 结果：2.356e+1 String对象 String对象属性：length,代表字符串字符数，注意这里不像c++要在最后再加一 String对象有些格式化html方法，如anchor()[设置html锚点]；link()[生成链接]；big()[放大字体]；blink()[生成闪动字体]；bold()[加粗字体]；italics()[设置斜体]；sub()[设置下角标]；sup()[设置上角标]；small()[缩小字体]；strike()[加一条删除线]; 值得注意的是，这种html格式化方法并不是所有浏览器都兼容，比如blink()他在ie就不兼容，所以我们要尽可能的避免使用这种html格式化方法，但是anchor()和link()除外，这两个还是可以用用的 1234var str = &quot;Hello world!&quot;str.anchor(&quot;myAnchor&quot;);//参数为锚点名alert(str.anchor(&quot;myAnchor&quot;)); 结果：12var str=&quot;baidu&quot;;document.write(str.link(&quot;http://www.baidu.com&quot;)); 结果： charAt()返回索引处字符，参数则为索引12var str=&quot;baidu&quot;;document.write(str.charAt(2)); 结果：i charCodeAt()返回指定位置的字符的unicode编码12var str=&quot;baidu&quot;;document.write(str.charCodeAt(3)); 结果：100 js中有三种截取字符串片段的方法，我首推slice(start,end)，其次subString(start,stop),不能推荐subStr，因为es6没有规范他，就不用他,而slice()和subString()唯一不同就是前者接受负数后者不接受 123var str=&quot;Hello happy world!&quot;document.write(str.slice(4,7))// 只包括不包括结尾即其实是截取了str[4]到str[6],若无第二个参数表示后面的都要，若这两个参数为负则用负数加长度 indexOf()和lastIndexOf() 返回子串最开始出现的索引和最后一次出现的索引，注意该函数对大小写十分敏感，若不存在返回-1 1234var str = &quot;Hello world&quot;;document.write(str.indexOf(&apos;w&apos;));document.write(str.indexOf(&apos;W&apos;));document.write(str.lastIndexOf(&apos;l&apos;)); 结果：6-19 split() 有两个参数，第一个参数是分割标志(写成字符串)，第二个参数可选，限定个数，这个其实就是拆分字符串,整成一个数组；需要说的是，splirt()也可直接用在变量后 document.&quot;sdh\nfbdkv\ffd&quot;.split(&quot;\&quot;,1) 结果:sdh12var str = &quot;Hello world&quot;;document.write(str.split(&quot; &quot;,1)); 结果：Hello toUpperCase()和toLowerCase()将字符串都变成大写和小写1234var str = &quot;hjfkdflk&quot;;document.write(str.toUpperCase());var str1 = &quot;DKFENDFLOR&quot;;document.write(str1.toLowerCase()); 结果：HJFKDFLKdkfendflor formCharCode()这是一个静态方法所谓静态方法就是只能是对象调用不能对象的实例化调用，这个方法是将unicode编码实例化成一个字符串 1document.write(String.fromCharCode(72,69,76,76,79)); 结果:HELLO Date对象实例化：var time = new Date(); Date对象方法 当所用的是例如网上商店下订单这种孤立的行为，使用用户本地的就行，若是像评论博客这种国际化的全体的行为，就设UTC Date()直接返回用户电脑的时间1document.write(Date()); 结果：Mon May 06 2019 15:49:35 GMT+0800 (中国标准时间) Math对象 Math对象的属性 Math对象的方法，注意这些都是静态方法，不需实例化javascript数组 在js中数组也是对象 数组对象的属性，length 数组对象的实例化方式可new可不new,定义数组后就可以用索引了，比如a[i] ①var arr = [&quot;apple&quot;,&quot;banana&quot;] ; ②var arr = new Array(3,4,5,6,2) ③12345var arr = new Array(3);arr[0]=(1,3);arr[1]=(3,5);arr[2]=(5,4);//二维及以上数组定义方法，再创数组对象 splice()[修改原来数组]实现对数组中元素的添加,删除，修改（每种前两个参数都是固定的，第一个是开始操作的索引，第二个是删除的数量），返回的是删除后组成的数组，即documentarr返回的是修改后的，documentarr.splice返回的删除的组成的数组1234//添加元素，注意不能写成document.write(arr.splice(0,0,&quot;people&quot;))因为返回的是删除的数组var arr = new Array(&quot;apple&quot;,&quot;banana&quot;,&quot;pear&quot;,&quot;pen&quot;);arr.splice(0,0,&quot;people&quot;)document.write(arr); 结果：people,apple,banana,pear,pen123var arr = new Array(&quot;apple&quot;,&quot;banana&quot;,&quot;pear&quot;,&quot;pen&quot;);arr.splice(0,1)document.write(arr); 结果：banana,pear,pen123var arr = new Array(&quot;apple&quot;,&quot;banana&quot;,&quot;pear&quot;,&quot;pen&quot;);arr.splice(0,1,&quot;people&quot;)document.write(arr); 结果：people,banana,pear,pen slice()[不改变原来数组]，即documentarr返回的是原来的数组，documentarr.slice返回的是修改后的数组，作用是返回截取的元素，两个参数，第一个参数是其实的索引(包括)，第二个参数是结束的索引(不包括)12var arr = new Array(&quot;apple&quot;,&quot;banana&quot;,&quot;pear&quot;,&quot;pen&quot;);document.write(arr.splice(0,3)); 结果：apple,banana,pear concat()[不改变原来数组]即documentarr返回的是原来的数组，documentarr.concat返回的是修改后的数组，作用是连接数组123456789var arr1 = new Array(&quot;apple&quot;,&quot;banana&quot;,&quot;pear&quot;,&quot;pen&quot;);var arr2 = new Array(&quot;story&quot;);var arr3 = new Array(&quot;fish&quot;)var arr4 = [3,4,5];document.write(arr1.concat(arr2));//连接两个数组document.write(&apos;&lt;br /&gt;&apos;);document.write(arr1.concat(arr2,arr3));//连接三个数组document.write(&apos;&lt;br /&gt;&apos;);document.write(arr4.concat(6,7));//连接参数 结果：123apple,banana,pear,pen,storyapple,banana,pear,pen,story,fish3,4,5,6,7 join() 将数组中对象用自己定义的分隔符输出12var arr1 = new Array(&quot;apple&quot;,&quot;banana&quot;,&quot;pear&quot;,&quot;pen&quot;);document.write(arr1.join(&apos;|&apos;)); 结果：apple|banana|pear|pen reverse() 颠倒数组顺序12var arr1 = new Array(&quot;apple&quot;,&quot;banana&quot;,&quot;pear&quot;,&quot;pen&quot;);document.write(arr1.reverse()); 结果：pen,pear,banana,apple push()和pop() 组合使用实现先进后出栈 push()实现在数组的最后面依次加元素,返回新长度；pop()实现删去数组最后一个元素，返回被删除的元素；123456789var arr1 = new Array(&quot;apple&quot;,&quot;banana&quot;,&quot;pear&quot;,&quot;pen&quot;);document.write(arr1.push(&quot;people&quot;,&quot;girl&quot;));// 可有多个参数document.write(&quot;&lt;br /&gt;&quot;);document.write(arr1);document.write(&quot;&lt;br /&gt;&quot;);document.write(arr1.pop());document.write(&quot;&lt;br /&gt;&quot;);document.write(arr1); 结果：12346apple,banana,pear,pen,people,girlgirlapple,banana,pear,pen,people unshift()[ie不支持]和shift() 前者可以有多个参数，作用是加在数组最前面，第一个参数为a[0]以此类推，返回的是新长度，后者是删除最前面的元素，返回被删除的元素即原数组的首元素123456789var arr1 = new Array(&quot;apple&quot;,&quot;banana&quot;,&quot;pear&quot;,&quot;pen&quot;);document.write(arr1.unshift(&quot;people&quot;,&quot;girl&quot;));// 可有多个参数document.write(&quot;&lt;br /&gt;&quot;);document.write(arr1);document.write(&quot;&lt;br /&gt;&quot;);document.write(arr1.shift());document.write(&quot;&lt;br /&gt;&quot;);document.write(arr1); 结果：12346people,girl,apple,banana,pear,penpeoplegirl,apple,banana,pear,pen 遍历数组12345var arr1 = new Array(&quot;apple&quot;,&quot;banana&quot;,&quot;pear&quot;,&quot;pen&quot;);for(var x in arr1)&#123; document.write(arr1[x]); document.write(&quot;&lt;br /&gt;&quot;);&#125; 结果：1234applebananapearpen]]></content>
      <categories>
        <category>javascript学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[day2]]></title>
    <url>%2F2019%2F05%2F05%2Fday2%2F</url>
    <content type="text"><![CDATA[程序运行时，程序计数器指向一个地址值，然后顺序结构的话，每进行一条指令，程序计数器上的值加一 其实cpu处理程序很有意思，像是比较累加寄存器和通用寄存器中的值，他实际上会进行减法运算，通过正负零来判断谁大谁小 运算结果存放在标志寄存器，无论结果是什么都会存放进去，同时标志寄存器还负责存放溢出和奇偶判断 分支结构是用的跳转指令，即运行时程序计数器不是单纯的一条指令加一 函数调用，实际上是先把调用处以下的指令先存放在栈，然后进行call到函数体进行，处理完函数体后，再return回到调用处的下一指令指向的地址，把栈上存放的指令读入到程序计数器上，再接着往下 说到划分内存，实际上要用到基址寄存器和变址寄存器，我们所说的实际地址值就是基址寄存器的值加上变址寄存器的值，而变址寄存器实际上就是我们所熟悉的数组的索引 正，0，负实际上存在32位的标志寄存器上的前三位]]></content>
      <categories>
        <category>睡前小读</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[运算符和语句]]></title>
    <url>%2F2019%2F05%2F05%2F%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[js语句的格式 要养成每条语句后都写分号的习惯 在js代码中，空白没意义，为了让代码更直观更易于维护，可尝试养成在等号前后，加号等前后写空格的习惯赋值语句 由左边变量，赋值变量和右边被赋给的值组成 右边的表达式可以是直接量值var vm = 35;一个变量和直接量再加上运算符的组合var value = vm + 27;函数的调用var nvalue = escape();一行可以包含多个赋值语句var a = b = c = 23; 二元运算符 二元运算符有加(+)减(-)乘(*)除(/)取余(%)注意在js中除法保存的是浮点数而不是截取的整数 这里重点说一下加法运算符，在字符串那里要特别注意，当两个运算数中有字符串时会优先将+解析为连接运算符12var vm = &quot;3.99&quot; + 2.7;document.write(vm); 结果：3.992.7 而对于其他的二元运算符，只要两个操作数中的字符串内只有数字就可以计算12var vm = &quot;3&quot; * 2;document.write(vm); 结果：6 为了在用加号时规避这种错误，最好采用parseInt或者parseFloat函数显式地转化一下字符串12var vm = parseInt(&apos;3&apos;) + 3;document.write(vm); 结果：6 一元运算符 一元运算符有负值运算符，自增运算符，自减运算符12345var vm = 2;var value = -vm;document.write(value);var nvalue = ++value;document.write(nvalue); 结果：-2-1 注意自增自减都有前置后置之分，前置是先自己变值在赋值，后置是先赋值在自己变值逻辑运算符，三元运算符，各种语句需要注意的因为有了c++基础就不多说什么事if循环啊啥的，记一点容易犯错的 注意短值运算，就是与的话当第一个表达式返回0，就不往下看了，这个直接就是假；是或的话当第一个表达式返回1，直接就是真，考虑到cpu等内存占用，应该把重要的依据放在前面 注意===和==区别，前面的是等同，现在已经广泛应用，因为当时字符串和数值比较，会先隐式地把字符串转化为数值型，用等同则返回false,用等于则返回true switch语句，注意写break,default;当多种情况是同一入口时，最好用如下形式： 1234case a:case b:case c:document.write(&quot;hhhhh&quot;); 注意if语句的条件里千万不能写等于号，最次也得写个== 当想至少进行一次循环时，选do···while而不用while 注意一下for循环中的for in型，在后面会用到比如遍历数组啥的，以后再说，先简单举个栗子1234object(&quot;a&quot;:b,&quot;c&quot;:d)for(x in object)&#123; txt += object[x] ;&#125; 结果：cd]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[day1]]></title>
    <url>%2F2019%2F05%2F04%2Fday1%2F</url>
    <content type="text"><![CDATA[CPU和内存是由很多的晶体管组成，他俩合称IC（集成电路） CPU由寄存器，运算器，控制器和时钟组成 程序运行过程：首先由程序员用高级语言写出程序，然后把程序编译成机器语言（即exe文件），然后将这个exe文件在内存上存一个副本，然后再在CPU上解析运行 将CPU的解析和运行过程放大来讲，是时钟先发出时钟信号，cpu开始工作啦，他先让寄存器去抓内存上的数据，然后运算器进行运算，然后控制器通过运算结果来控制整个计算机，其实也就是控制输入输出什么的 实际上，对于程序员来说可以把CPU简单的理解为是很多很多寄存器的集合体，寄存器有很多种，不仅是他们存储的类型上，比如有的是存数值这种数据的，有的他是存地址这样的数据 汇编语言是由助记符组成的（比如将addition写成add），他和机器语言实际上是一一对应的，每一个机器语言实际上都有对应的汇编语言。因而，我们把将汇编语言转换成机器语言成为汇编过程，把机器语言转换为汇编语言称为反汇编过程 其实，编译器汇编器这种的并不是我们所想的一种组件什么的，他其实就是一个程序 我们可以简单地把程序运行的过程就当成是各种寄存器之间的处理，因此我们只要知道CPU是寄存器的集合体就好 内存，我们叫主储存器，现在一般都是DRAM（动态随机存储器），就是储存数据啊啥的，1个字节是8位，每个都有地址]]></content>
      <categories>
        <category>睡前小读</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[js数据类型与变量]]></title>
    <url>%2F2019%2F05%2F04%2Fjs%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[标识符 标识符只能由数字，字母，$符和下划线表示 首字符必须是字母或$符或下划线，切记不能是数字 在所使用的的作用域内，每个变量的标识符是唯一的 可在变量标识符中使用Unicode的字母和数字，官网链接 可使用转义序列 区分大小写 不得使用js关键字，ECMA 262规范的保留字，浏览器中典型的保留字，具体如下图 js关键字 ECMA 262规范的保留字 浏览器中典型的保留字 尽量使用有意义的，提高可维护性 一些小规范：①项目的集合名称应用复数②对象名首字母大写③函数和变量以小写字母开始并使用驼峰法,也可每个单词间用下划线作用域 局部变量：在一个函数内定义，初始化，函数结束时变量不存在 全局变量：在所有地方都可访问，包括引入的js库 要养成写var的习惯，因为当你想要定义一个局部变量但没有写var就会被当做全局变量，也就是说全局变量可不写var但最好也要写字符串型 单引号和双引号作用一样，不做区别；但是当需要嵌套时不能同型套同型，只能是单引号套双引号或双引号套单引号 字符串中可包括转义序列，例如 \n \\ \&#39; \&quot; 可使用escape函数和unescape函数进行编码和解码，但需要注意的是这两个函数不能处理非ASCII码字符，这是可使用encodeURI和decodeURI函数，下面是使用escape函数和unescape函数的示例12document.write(escape(&quot;sbadkf65488$%^&quot;));document.write(unescape(&quot;sbadkf65488%24%25%5E&quot;)); 结果：sbadkf65488%24%25%5Esbadkf65488$%^ 空字符串是一种特殊情形，一般用来初始化 字符串连接:12var year=2019;document.write(&quot;今年是&quot;+year+&quot;年&quot;); 结果：今年是2019年 toString函数，将其他类型转换为字符串类型123document.write(boo.toString());//显示数据类型document.write(typeof boo.toString()); 布尔型 只有true和false两种，不能用引号包起来 Boolean函数,将其他类型转化为布尔型。需要注意的是没有toBoolean函数了，是Boolean函数！！！！还有强调一下有管字符串转成布尔型，当是空字符串时返回false，当是一个及以上空格时返回true,具体实践如下1234var s=Boolean(&quot;&quot;);document.write(s);var r=Boolean(&quot; &quot;);document.write(r); 结果：falsetrue 数值型 js中数字是浮点型，需要注意的是，js的计算能力不是很强，所以在数字方面一般不是很精确 可取数范围是-2e31到2e31;js中规定正无穷用Infinity表示，负无穷用-Infinity表示；当某函数出现溢出时则会返回一个Infinity（正无穷） parseFloat()和parseInt(),这两个函数都可用于在字符串中提取出数字，但需要注意的是只能提取出第一个字符就是数字的字符串否则报错，其次，parseInt()只取整数部分，注意事项截取而不是四舍五入;这两个函数还可将八进制或十六进制数转化为十进制，只需在后面加一个参数默认为10，具体例子如下1234var str1=parseInt(&quot;0x5F&quot;,16);document.write(str1);var str2=parseFloat(&quot;171.8cm&quot;);document.write(str2); 结果：95171.8 isFinite函数，用来判断无穷大，当值是无穷大或NaN时返回false,否则返回true Number函数，将其他数据类型转换为数值型,注意字符串类型，只有在字符串内全部是数字时才有用，否则返回NaN12var str2=Number(&quot;171.8cm&quot;);document.write(str2); 结果：NaN 常量const 变量名 = 值； 只定义一次 null与undefinedjavaScript权威指南： null 和 undefined 都表示“值的空缺”，你可以认为undefined是表示系统级的、出乎意料的或类似错误的值的空缺，而null是表示程序级的、正常的或在意料之中的值的空缺 javaScript高级程序设计： 在使用var声明变量但未对其加以初始化时，这个变量的值就是undefined。 null值则是表示空对象指针 其实，null就给他理解成一个空对象，暂时赋给一个变量，而undefined就是当访问为初始化的变量时返回undefined]]></content>
      <categories>
        <category>javascript学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[myBlog]]></title>
    <url>%2F2019%2F05%2F04%2FmyBlog%2F</url>
    <content type="text"><![CDATA[嘻嘻嘻。 吼吼吼。]]></content>
      <categories>
        <category>日常</category>
      </categories>
  </entry>
</search>
